# Joplin 项目开发规范和习惯

## 状态管理规范

### Redux Store 使用规范
1. 组件状态应该通过 Redux store 统一管理
2. 使用 mapStateToProps 从 store 获取状态
3. 组件内部只保留 UI 相关的本地状态
4. 数据修改通过 dispatch action 进行
5. Action 类型应该在 reducer 中定义并导出

### 自定义 Hook 规范
1. Hook 命名使用 useXxx 格式
2. Hook 应该处理特定的业务逻辑
3. Hook 应该返回状态和操作方法
4. Hook 内部的错误处理应该统一
5. Hook 应该遵循依赖注入原则
6. Hook 中的异步函数必须有明确的返回值
7. Hook 不应该维护与 Redux 重复的状态
8. Hook 的返回值应该只包含实际使用的内容

### 数据流转规范
1. 使用 payload 包装 action 数据
2. Action type 使用常量定义
3. Reducer 中处理可选值时使用空值合并
4. 状态更新前进行数据有效性验证
5. 避免在组件中直接修改状态

## 数据库操作规范

### 模型定义规范
1. 模型类应该继承自 BaseModel
2. 必须实现 tableName 和 modelType 方法
3. 数据库字段类型应该在 types.ts 中定义
4. 查询方法应该使用 async/await
5. 必须处理数据库操作的异常

### 数据库迁移规范
1. 迁移文件按序号命名
2. 迁移文件必须导出默认函数
3. 必须在 migrations/index.ts 中注册
4. 建表语句必须包含必要的索引
5. 必须考虑向后兼容性

## 组件开发规范

### 组件结构规范
1. 使用 TypeScript 开发
2. 使用函数式组件和 Hooks
3. Props 接口必须明确定义
4. 样式使用 styled-components
5. 组件应该是可测试的

### 组件状态管理
1. UI 状态（如 loading）使用本地 state
2. 业务数据状态使用 Redux store
3. 使用 useCallback 优化事件处理
4. 使用 useEffect 处理副作用
5. Props 应该提供默认值或空值处理

### 错误处理规范
1. 异步操作必须有 try-catch
2. 错误信息应该通过 Redux 统一管理
3. UI 应该优雅降级显示错误状态
4. 日志记录使用 reg.logger()
5. 避免吞掉错误，要么处理要么抛出

### 性能优化规范
1. 使用 useCallback 缓存函数
2. 使用 useRef 保存 DOM 引用
3. 列表渲染添加 key 属性
4. 大列表考虑虚拟滚动
5. 合理使用 React.memo

## 代码风格规范

### TypeScript 规范
1. 定义完整的接口类型
2. 使用可选链和空值合并
3. 函数返回值类型明确
4. 避免使用 any 类型
5. 合理使用类型断言

### 异步编程规范
1. 使用 async/await 替代 Promise 链
2. 异步函数必须处理错误
3. 避免嵌套异步调用
4. 使用 void 处理不需要等待的 Promise
5. 异步状态通过 Redux 管理

### 注释规范
1. 使用中文注释说明业务逻辑
2. 复杂逻辑必须有注释说明
3. 组件 Props 必须有注释
4. 公共方法必须有注释
5. 及时删除无用注释

## UI/UX 规范

### 交互设计规范
1. 提供加载状态反馈
2. 错误信息友好展示
3. 支持键盘操作
4. 状态切换要有过渡动画
5. 表单操作要有禁用状态

### 样式开发规范
1. 使用 styled-components
2. 样式命名语义化
3. 响应式布局
4. 主题色统一管理
5. 避免内联样式

## 测试规范

### 单元测试规范
1. Hook 测试关注返回值
2. Action 测试关注 payload
3. Reducer 测试关注状态变化
4. 异步测试使用 act
5. 测试用例要有边界条件

### 集成测试规范
1. 测试完整的用户操作流程
2. 模拟真实的网络请求
3. 验证 UI 状态变化
4. 测试错误处理流程
5. 测试性能和并发
